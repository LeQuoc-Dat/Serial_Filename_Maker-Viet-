import os
import tkinter as tk
import shutil

from tkinter import filedialog, messagebox, ttk
from Resnet_cover_classifier import load_Resnet_Classifier_model, pdf_to_images, predict_cover, convert_pil_to_opencv
from Serial_scanner import load_Serial_Scanner_model, detect_seri, extract_seri

# Hi·ªÉn th·ªã th√¥ng b√°o ho√†n t·∫•t
messagebox.showinfo("Kh·ªüi ƒë·ªông", "Ch∆∞∆°ng tr√¨nh ƒë√£ s·∫µn s√†ng!")

# Ti·∫øp t·ª•c v·ªõi ph·∫ßn c√≤n l·∫°i c·ªßa giao di·ªán ch√≠nh ho·∫∑c c√°c t√°c v·ª• sau ƒë√≥

# Bi·∫øn to√†n c·ª•c
Root = None
label_result_2 = None
combo_output_folder = None
entry_input= None
output_folder_list = []

OUTPUT_FILE = "output_folder_list.txt"  # File l∆∞u danh s√°ch th∆∞ m·ª•c OUTPUT


def Load_models():
    """H√†m t·∫£i m√¥ h√¨nh nh·∫≠n di·ªán b√¨a v√† s·ªë seri."""
    resnet_cover_classifier_model_patch = "models/resnet_cover_classifier.pth"
    serial_scanner_model_patch = "models/yolov8_best.pt"
    Resnet_Cover_Classifier_model = load_Resnet_Classifier_model(resnet_cover_classifier_model_patch)
    Serial_Scanner_model = load_Serial_Scanner_model(serial_scanner_model_patch)
    return Resnet_Cover_Classifier_model, Serial_Scanner_model

def process_pdf(file_path, resnet_model, yolo_model, output_folder):
    """X·ª≠ l√Ω file PDF: t√°ch ·∫£nh, nh·∫≠n di·ªán b√¨a, tr√≠ch xu·∫•t s·ªë seri v√† ƒë·ªïi t√™n file."""
    file_path = normalize_path(file_path)

    if not os.path.isfile(file_path):
        print(f"‚ö† L·ªói: File kh√¥ng t·ªìn t·∫°i t·∫°i {file_path}")
        return

    List_PDF_page_images = pdf_to_images(file_path)
    if not List_PDF_page_images:
        print("‚ö† L·ªói: Kh√¥ng th·ªÉ tr√≠ch xu·∫•t ·∫£nh t·ª´ PDF!")
        return

    Pil_Cover_image = predict_cover(List_PDF_page_images, resnet_model)
    if Pil_Cover_image is None:
        print("‚ö† L·ªói: Kh√¥ng t√¨m th·∫•y ·∫£nh b√¨a!")
        return

    Numpy_Cover_image = convert_pil_to_opencv(Pil_Cover_image)
    Detected_Serial_image = detect_seri(Numpy_Cover_image, yolo_model)

    Serial_number = extract_seri(Detected_Serial_image).strip()
    if not Serial_number:
        print("‚ö† L·ªói: Kh√¥ng th·ªÉ tr√≠ch xu·∫•t s·ªë seri!")
        return

    new_filename = Serial_number + ".pdf"
    os.makedirs(output_folder, exist_ok=True)
    new_path = normalize_path(os.path.join(output_folder, new_filename))

    try:
        if os.path.exists(new_path):
             user_choice = messagebox.askyesno("X√°c nh·∫≠n", f"File {new_filename} ƒë√£ t·ªìn t·∫°i!\nB·∫°n c√≥ mu·ªën thay th·∫ø kh√¥ng?")
             if not user_choice:
                print(f"‚ö† Ng∆∞·ªùi d√πng ch·ªçn b·ªè qua file {new_filename}.")
                return  # B·ªè qua file n·∫øu ch·ªçn "No"
        shutil.move(file_path, new_path)
        print(f"‚úÖ ƒê·ªïi t√™n th√†nh c√¥ng: {file_path} -> {new_path}")
    except PermissionError:
        print("‚ö† L·ªói: Kh√¥ng th·ªÉ ƒë·ªïi t√™n file. H√£y ki·ªÉm tra xem file c√≥ ƒëang m·ªü kh√¥ng.")
    except Exception as e:
        print(f"‚ö† L·ªói kh√¥ng x√°c ƒë·ªãnh: {e}")

def process_input_folder(folder_path, resnet_model, yolo_model, output_folder):
    if not os.path.isdir(folder_path):
        print(f"‚ö† L·ªói: Th∆∞ m·ª•c '{folder_path}' kh√¥ng t·ªìn t·∫°i!")
        return

    pdf_files = [f for f in os.listdir(folder_path) if f.lower().endswith(".pdf")]

    if not pdf_files:
        print("‚ö† Kh√¥ng t√¨m th·∫•y file PDF n√†o trong th∆∞ m·ª•c!")
        return
    print(f"üîÑ ƒêang x·ª≠ l√Ω {len(pdf_files)} file PDF trong th∆∞ m·ª•c '{folder_path}'...")

    success_count = 0
    fail_count = 0
    for file_name in pdf_files:
        file_path = os.path.join(folder_path, file_name)
        try:
            process_pdf(file_path, resnet_model, yolo_model, output_folder)
            success_count += 1
        except Exception as e:
            print(f"‚ö† L·ªói khi x·ª≠ l√Ω {file_name}: {e}")
            fail_count += 1

    print(f"‚úÖ Ho√†n th√†nh! {success_count} file x·ª≠ l√Ω th√†nh c√¥ng, {fail_count} file b·ªã l·ªói.")
          
        
def normalize_path(path):
    #"""Chu·∫©n h√≥a ƒë∆∞·ªùng d·∫´n file, chuy·ªÉn d·∫•u \ th√†nh / ƒë·ªÉ tr√°nh l·ªói h·ªá ƒëi·ªÅu h√†nh."""
    return os.path.abspath(path).replace("\\", "/")  # Chuy·ªÉn to√†n b·ªô \ th√†nh /

def save_output_folder(output_folder_path):
    """L∆∞u ƒë∆∞·ªùng d·∫´n OUTPUT v√†o file, tr√°nh tr√πng l·∫∑p v√† l√†m m·ªõi danh s√°ch h·ª£p l·ªá"""
    global output_folder_list
    path = output_folder_path.get().strip()

    if path:
        # C·∫≠p nh·∫≠t danh s√°ch (lo·∫°i b·ªè th∆∞ m·ª•c kh√¥ng t·ªìn t·∫°i)
        refresh_output_folders()
        
        if path not in output_folder_list:
            output_folder_list.append(path)

        try:
            with open(OUTPUT_FILE, "w", encoding="utf-8") as f:
                f.write("\n".join(output_folder_list))
            print("ƒê√£ l∆∞u OUTPUT:", path)
            combo_output_folder["values"] = output_folder_list  # C·∫≠p nh·∫≠t ComboBox
        except Exception as e:
            messagebox.showerror("L·ªói", f"L∆∞u th∆∞ m·ª•c th·∫•t b·∫°i!\n{e}")

def load_output_folders():
    """T·∫£i danh s√°ch th∆∞ m·ª•c OUTPUT t·ª´ file v√† lo·∫°i b·ªè th∆∞ m·ª•c kh√¥ng c√≤n t·ªìn t·∫°i"""
    global output_folder_list
    if os.path.exists(OUTPUT_FILE):
        with open(OUTPUT_FILE, "r", encoding="utf-8") as f:
            output_folder_list = f.read().splitlines()
    
    refresh_output_folders()


def refresh_output_folders():
    """X√≥a th∆∞ m·ª•c kh√¥ng t·ªìn t·∫°i kh·ªèi danh s√°ch"""
    global output_folder_list
    output_folder_list = [folder for folder in output_folder_list if os.path.exists(folder)]

    # C·∫≠p nh·∫≠t ComboBox
    combo_output_folder["values"] = output_folder_list
    if output_folder_list:
        combo_output_folder.set(output_folder_list[-1])  # Ch·ªçn th∆∞ m·ª•c cu·ªëi c√πng
    else:
        combo_output_folder.set("")  # X√≥a n·∫øu kh√¥ng c√≤n th∆∞ m·ª•c h·ª£p l·ªá

    # Ghi l·∫°i file ƒë·ªÉ x√≥a ƒë∆∞·ªùng d·∫´n kh√¥ng h·ª£p l·ªá
    with open(OUTPUT_FILE, "w", encoding="utf-8") as f:
        f.write("\n".join(output_folder_list))

def select_output_folder(output_folder_path):
    """Ch·ªçn th∆∞ m·ª•c OUTPUT v√† c·∫≠p nh·∫≠t ComboBox"""
    path = filedialog.askdirectory(initialdir=combo_output_folder.get() or "/", title="Ch·ªçn th∆∞ m·ª•c OUTPUT")
    if path:
        output_folder_path.set(path)
        save_output_folder(output_folder_path)
        combo_output_folder.set(path)
        messagebox.showinfo("Th√†nh c√¥ng", f"ƒê√£ ch·ªçn th∆∞ m·ª•c OUTPUT:\n{path}")

def select_input_folder(input_path):
    """Ch·ªçn th∆∞ m·ª•c INPUT"""
    path = filedialog.askdirectory(initialdir="/", title="Ch·ªçn th∆∞ m·ª•c ch·ª©a file PDF")  # Lu√¥n m·ªõi
    if path:
        input_path.set(path)  # S·ª≠ d·ª•ng input_path thay v√¨ input_folder_path
        entry_input.delete(0, tk.END)
        entry_input.insert(0, path)

def select_input_PDF_file(input_path):
    global entry_input
    path = filedialog.askopenfilename(initialdir="/", title="Ch·ªçn file PDF", filetypes=[("PDF file", "*.pdf")])
    if path:
        input_path.set(path)
        entry_input.delete(0, tk.END)
        entry_input.insert(0, path)

def run_processing(input_path, output_folder_path, resnet_model, yolo_model):
    data_input_path = str(input_path.get()).strip()
    data_output_path = str(output_folder_path.get()).strip()

    if os.path.isdir(data_input_path):
        process_input_folder(data_input_path, resnet_model, yolo_model, data_output_path)
    else:
        process_pdf(data_input_path, resnet_model, yolo_model, data_output_path)

def tkinter_main():
    """H√†m kh·ªüi ƒë·ªông giao di·ªán Tkinter"""
    global Root, label_result_2, combo_output_folder, entry_input
    resnet_model, yolo_model = Load_models()
    if not resnet_model or not yolo_model:
        print("‚ùå L·ªói: Ch∆∞∆°ng tr√¨nh kh√¥ng th·ªÉ ch·∫°y do l·ªói t·∫£i m√¥ h√¨nh.")
        return

    Root = tk.Tk()
    print("Kh·ªüi ƒë·ªông ho√†n t·∫•t")
    Root.title("Serial Filename Maker")
    Root.geometry('600x400')

    # T·∫°o bi·∫øn
    output_folder_path = tk.StringVar()
    input_path = tk.StringVar()

    # Giao di·ªán ch·ªçn th∆∞ m·ª•c OUTPUT
    tk.Label(Root, text="Ch·ªçn th∆∞ m·ª•c b·∫°n mu·ªën l∆∞u:", font=("Arial", 12, "bold")).pack(pady=5)
    
    frame_output = tk.Frame(Root)
    frame_output.pack(pady=5)

    combo_output_folder = ttk.Combobox(frame_output, textvariable=output_folder_path, width=50, state="readonly")
    combo_output_folder.pack(side=tk.LEFT, padx=5)
    
    btn_Browser1 = tk.Button(frame_output, text="M·ªü th∆∞ m·ª•c", command=lambda: select_output_folder(output_folder_path))
    btn_Browser1.pack(side=tk.LEFT)

    # Giao di·ªán ch·ªçn th∆∞ m·ª•c INPUT
    tk.Label(Root, text="Ch·ªçn th∆∞ m·ª•c ch·ª©a t·ªáp PDF ho·∫∑c ch·ªçn t·ªáp PDF m√† b·∫°n mu·ªën x·ª≠ l√Ω:", font=("Arial", 9, "bold")).pack(pady=5)

    frame_input = tk.Frame(Root)
    frame_input.pack(pady=5)
    
   
    entry_input = tk.Entry(frame_input, textvariable=input_path, width=50)
    entry_input.pack(side=tk.LEFT, padx=5)
    
    btn_Browser2 = tk.Button(frame_input, text="M·ªü th∆∞ m·ª•c", command=lambda: select_input_folder(input_path))
    btn_Browser2.pack(side=tk.LEFT)
    btn_Browser3 = tk.Button(frame_input, text="M·ªü t·ªáp", command=lambda: select_input_PDF_file(input_path))
    btn_Browser3.pack(side=tk.LEFT)
    btn_Run = tk.Button(frame_input, text="Ti·∫øn h√†nh x·ª≠ l√Ω", command=lambda: run_processing(input_path, output_folder_path, resnet_model, yolo_model))
    btn_Run.pack(side=tk.LEFT)
    

    # Load danh s√°ch th∆∞ m·ª•c OUTPUT ƒë√£ l∆∞u tr∆∞·ªõc ƒë√≥
    load_output_folders()

    # B·∫Øt ƒë·∫ßu v√≤ng l·∫∑p giao di·ªán
    Root.mainloop()

if __name__ == "__main__":
    tkinter_main()
